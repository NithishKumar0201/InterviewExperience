//Attaching all java files here as one. There are totally 5 class files
//Topic, Question, Answer, QnAPlatform, Main

import java.util.HashSet;
import java.util.Set;

class Topic {
    String name;
    Set<String> subscribers;

    Topic(String name) {
        this.name = name;
        this.subscribers = new HashSet<>();
    }

    void subscribe(String userId) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }
        subscribers.add(userId);
    }

    void unsubscribe(String userId) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }
        subscribers.remove(userId);
    }

    boolean isSubscribed(String userId) {
        return subscribers.contains(userId);
    }
}

//------

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

class Question {
    String id;
    String question;

    String userId;
    List<String> topics;
    List<Answer> answers;
    int upvotes;

    Question(String id, String question, List<String> topics, String userId) {
        this.id = id;
        this.question = question;
        this.userId = userId;
        this.topics = topics;
        this.answers = new ArrayList<>();
        this.upvotes = 0;
    }

    void addAnswer(Answer answer) {
        answers.add(answer);
    }
    boolean isAnswered() {
        return !answers.isEmpty();
    }
    void upvote() {
        upvotes++;
    }
    String getQuestion() {
        return this.question;
    }

    String getUserId() {
        return this.userId;
    }

    List<String> getTopics() {
        return this.topics;
    }

    List<Answer> getAnswers() {
        return this.answers;
    }
    @Override
    public String toString() {
        return "Question{" +
                ", question='" + question + '\'' +
                ", topic='" + topics + '\'' +
                ", upvotes=" + upvotes +
                '}';
    }
}

//-------

import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

class Answer {
    String id;
    String answer;
    String userId;
    List<String> responses;
    private int upvotes = 0;

    Answer(String id, String answer, String userId) {
        this.id = id;
        this.answer = answer;
        this.userId = userId;
        this.responses = new ArrayList<>();
    }

    String getAnswer() {
        return this.answer;
    }

    String getUserId() {
        return this.userId;
    }

    List<String> getResponses() {
        return this.responses;
    }

    void addResponse(String response) {
        this.responses.add(response);
    }

    public void upvote() {
        this.upvotes++;
    }

    public int getUpvotes() {
        return this.upvotes;
    }

}

//----------

import java.util.*;

class QnAPlatform {
    Map<String, Topic> topics;
    Map<String, Question> questions;
    Map<String, List<Question>> userQuestions;
    Map<String, Answer> answers;
    private static int questionCounter = 1;
    private static int answerCounter = 1;
    QnAPlatform() {
        this.topics = new HashMap<>();
        this.questions = new HashMap<>();
        this.userQuestions = new HashMap<>();
        this.answers = new HashMap<>();
    }

    void subscribe(List<String> topicNames, String userId) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }
        for (String topicName : topicNames) {
            Topic topic = topics.getOrDefault(topicName, new Topic(topicName));
            topic.subscribe(userId);
            topics.put(topicName, topic);
        }
        System.out.println(userId +" is subscribed");
    }

    void unsubscribe(List<String> topicNames, String userId) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }
        for (String topicName : topicNames) {
            Topic topic = topics.get(topicName);
            if (topic != null) {
                topic.unsubscribe(userId);
            }
        }
    }

    String addQuestion(String question, List<String> topics, String userId) {
        if (question == null || question.isEmpty()) {
            throw new IllegalArgumentException("Question cannot be null or empty");
        }
        if (topics == null || topics.isEmpty()) {
            throw new IllegalArgumentException("Topics cannot be null or empty");
        }
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }
        String questionId = "Q-" + questionCounter++;
        Question newQuestion = new Question(questionId, question, topics, userId);
        questions.put(questionId, newQuestion);

        for(String topic : topics) {
            Topic top = this.topics.get(topic);
            if(top != null && top.isSubscribed(userId)) {
                if(userQuestions.containsKey(userId)) {
                    userQuestions.get(userId).add(newQuestion);
                } else {
                    List<Question> questionList = new ArrayList<>();
                    questionList.add(newQuestion);
                    userQuestions.put(userId, questionList);
                }
            }
        }
        System.out.println(questionId +" is added by "+ userId);
        return questionId;
    }
    List<Question> showFeed(String userId) {
        List<Question> feed = new ArrayList<>();
        for (Question question : questions.values()) {
            for (String topic : question.topics) {
                if (topics.get(topic).isSubscribed(userId)) {
                    feed.add(question);
                    break;
                }
            }
        }
        return feed;
    }
    List<Question> showFeed( String filterTopic, String userId) {
        List<Question> feed = new ArrayList<>();
        for (Question question : questions.values()) {
            if (question.topics.contains(filterTopic) && topics.get(filterTopic).isSubscribed(userId)) {
                feed.add(question);
            }
        }
        return feed;
    }
    List<Question> showFeed(boolean answered, String userId) {
        List<Question> feed = new ArrayList<>();
        for (Question question : questions.values()) {
            if (answered && question.isAnswered() && question.getUserId().equals(userId)) {
                feed.add(question);
            } else if (!answered && !question.isAnswered() && question.getUserId().equals(userId)) {
                feed.add(question);
            }
        }
        return feed;
    }
    String answerQuestion(String questionId, String answer, String userId) {
        Question question = questions.get(questionId);
        String newAnswerId = null;
        if(question != null) {
            for(String topic : question.topics) {
                if(topics.get(topic).isSubscribed(userId)) {
                    newAnswerId = "A-"+answerCounter++;
                    Answer newAnswer = new Answer(newAnswerId, answer, userId);
                    question.addAnswer(newAnswer);
                    answers.put(newAnswerId, newAnswer);
                }
            }
        }
        System.out.println(newAnswerId +" is added by "+ userId);
        return newAnswerId;
    }
    String showQuestion(String questionId , String userId) {
        StringBuilder sb = new StringBuilder();
        Question question = questions.get(questionId);
        if (question != null) {
            sb.append("Question: " + question.getQuestion() + "\n");
            sb.append("User: " + question.getUserId() + "\n");
            sb.append("Topics: " + question.getTopics() + "\n");
            sb.append("Answers for the question are: " + "\n");
            for (Answer answer : question.getAnswers()) {
                sb.append("Answer: " + answer.getAnswer() + "\n");
                sb.append("Answer Upvote: " + answer.getUpvotes() + "\n");
                sb.append("Comments: " + answer.getResponses() + "\n");
            }
        } else {
            sb.append("No such question exists");
        }
        return sb.toString();
    }

    void upvoteQuestion(String questionId, String userId) {
        Question question = questions.get(questionId);
        if(question != null) {
            for(String topic : question.topics) {
                if(topics.get(topic).isSubscribed(userId)) {
                    question.upvote();
                }
            }
        }
    }
    void upvoteAnswer(String answerId, String userId) {
        Answer answer = answers.get(answerId);
        if(answer != null) {
            answer.upvote();
        } else {
            System.out.println("No such answer exists");
        }
    }
    void respondToAnswer(String answerId, String response, String userId) {
        for(Question question : questions.values()) {
            for(Answer answer : question.answers) {
                if(answer.id.equals(answerId)) {
                    answer.addResponse(response);
                }
            }
        }
    }
}

//----------

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        QnAPlatform platform = new QnAPlatform();

        platform.subscribe(Arrays.asList("java", "hadoop","jdk"), "userId1"); // userId1 is subscribed

        String q1 = platform.addQuestion("What are new open source jdks?", Arrays.asList("java", "jdk"), "userId1");
        //Q-1 is added by userId1

        String q2 = platform.addQuestion("Does Hadoop work on JDK 11?", Arrays.asList("hadoop", "jdk"), "userId1");
        //Q-2 is added by userId1

        System.out.println(platform.showFeed("userId1"));
        //[Question{, question='What are new open source jdks?', topic='[java, jdk]', upvotes=0},
        // Question{, question='Does Hadoop work on JDK 11?', topic='[hadoop, jdk]', upvotes=0}]

        System.out.println(platform.showFeed("java", "userId1"));
        //[Question{, question='What are new open source jdks?', topic='[java, jdk]', upvotes=0}]

        System.out.println(platform.showFeed("jdk", "userId1"));
        //[Question{, question='What are new open source jdks?', topic='[java, jdk]', upvotes=0}, Question{, question='Does Hadoop work on JDK 11?', topic='[hadoop, jdk]', upvotes=0}]

        System.out.println(platform.showFeed(true, "userId1"));
        // []

        platform.subscribe(Arrays.asList("apache", "hadoop"), "userId2");
        //userId2 is subscribed

        System.out.println(platform.showFeed("userId2"));
        // [Question{, question='Does Hadoop work on JDK 11?', topic='[hadoop, jdk]', upvotes=0}]

        String q3 = platform.addQuestion("Does Apache Spark support streaming of data from hdfs?", Arrays.asList("apache", "hadoop"), "userId2");
        // Q-3 is added by userId2

        String a1 = platform.answerQuestion(q2, "Yeah Hadoop 3 and above supports it.", "userId2");
        //A-1 is added by userId2

        System.out.println(platform.showFeed("userId2"));
        //[Question{, question='Does Apache Spark support streaming of data from hdfs?', topic='[apache, hadoop]', upvotes=0}, Question{, question='Does Hadoop work on JDK 11?', topic='[hadoop, jdk]', upvotes=0}]

        System.out.println(platform.showFeed(true, "userId1"));
        //[Question{, question='Does Hadoop work on JDK 11?', topic='[hadoop, jdk]', upvotes=0}]

        platform.subscribe(Arrays.asList("apache","java", "hadoop"), "userId3");
        //userId3 is subscribed

        System.out.println(platform.showFeed("userId3"));
        //[Question{, question='What are new open source jdks?', topic='[java, jdk]', upvotes=0},
        // Question{, question='Does Apache Spark support streaming of data from hdfs?', topic='[apache, hadoop]', upvotes=0},
        // Question{, question='Does Hadoop work on JDK 11?', topic='[hadoop, jdk]', upvotes=0}]

        System.out.println(platform.showQuestion(q2, "userId3"));
        //Question: Does Hadoop work on JDK 11?
        //User: userId1
        //Topics: [hadoop, jdk]
        //Answers for the question are:
        //Answer: Yeah Hadoop 3 and above supports it.
        //Answer Upvote: 0
        //Comments: []

        platform.upvoteQuestion(q2, "userId3");
        System.out.println(platform.showFeed("userId1"));
        //[Question{, question='What are new open source jdks?', topic='[java, jdk]', upvotes=0},
        // Question{, question='Does Apache Spark support streaming of data from hdfs?', topic='[apache, hadoop]', upvotes=0},
        // Question{, question='Does Hadoop work on JDK 11?', topic='[hadoop, jdk]', upvotes=1}]
        platform.upvoteAnswer(a1, "userId3");

        //bonus
        platform.respondToAnswer(a1, "This is my response.", "userId3");
        System.out.println(platform.showQuestion(q2, "userId3"));
        //Question: Does Hadoop work on JDK 11?
        //User: userId1
        //Topics: [hadoop, jdk]
        //Answers for the question are:
        //Answer: Yeah Hadoop 3 and above supports it.
        //Answer Upvote: 1
        //Comments: [This is my response.]


        platform.unsubscribe(Arrays.asList("java","hadoop","jdk"), "userId1");
        System.out.println("UserId1 has subcribed to below:");
        System.out.println(platform.showFeed("userId1"));
        //UserId1 has subcribed to below:
        //[]

    }
}
